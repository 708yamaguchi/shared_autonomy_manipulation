--- object_segmentation_frame.cpp	2012-04-09 14:53:15.994455891 -0700
+++ object_segmentation_frame.final.cpp	2012-04-09 14:53:03.112066327 -0700
@@ -1,3 +1,39 @@
+/*********************************************************************
+ *
+ * Software License Agreement (BSD License)
+ *
+ *  Copyright (c) 2012, Robert Bosch LLC.
+ *  All rights reserved.
+ *
+ *  Redistribution and use in source and binary forms, with or without
+ *  modification, are permitted provided that the following conditions
+ *  are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+ *   * Neither the name of the Robert Bosch nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ *  POSSIBILITY OF SUCH DAMAGE.
+ *
+ *********************************************************************/
+
 ///////////////////////////////////////////////////////////////////////////
 // C++ code generated with wxFormBuilder (version Dec 21 2009)
 // http://www.wxformbuilder.org/
@@ -13,6 +49,8 @@
 {
 	this->SetSizeHints( wxDefaultSize, wxSize( -1,-1 ) );
 	this->SetBackgroundColour( wxColour( 135, 136, 138 ) );
+
+	wxInitAllImageHandlers();	
 	
 	wxBoxSizer* bSizer1;
 	bSizer1 = new wxBoxSizer( wxVERTICAL );
@@ -43,7 +81,7 @@
 	
 	LogoSizer->Add( 0, 0, 5, wxEXPAND, 5 );
 	
-	BoschLogo = new wxStaticBitmap( MainPanel, wxID_ANY, wxBitmap( wxT("Bosch_Logo_small.png"), wxBITMAP_TYPE_ANY ), wxDefaultPosition, wxSize( -1,-1 ), 0 );
+	BoschLogo = new wxStaticBitmap( MainPanel, wxID_ANY, wxBitmap( wxT("ui/Bosch_Logo_small.png"), wxBITMAP_TYPE_PNG ), wxDefaultPosition, wxSize( -1,-1 ), 0 );
 	BoschLogo->SetBackgroundColour( wxColour( 255, 255, 255 ) );
 	
 	LogoSizer->Add( BoschLogo, 0, wxTOP|wxBOTTOM|wxRIGHT, 10 );
@@ -74,9 +112,9 @@
 	wxBoxSizer* SegmentSizer;
 	SegmentSizer = new wxBoxSizer( wxVERTICAL );
 	
-	segment_button_ = new wxBitmapButton( MainPanel, wxID_ANY, wxBitmap( wxT("Arcade_Blue_Up.png"), wxBITMAP_TYPE_ANY ), wxDefaultPosition, wxDefaultSize, 0|wxNO_BORDER );
+	segment_button_ = new wxBitmapButton( MainPanel, wxID_ANY, wxBitmap( wxT("ui/Arcade_Blue_Up.png"), wxBITMAP_TYPE_PNG ), wxDefaultPosition, wxDefaultSize, 0|wxNO_BORDER );
 	
-	segment_button_->SetBitmapSelected( wxBitmap( wxT("Arcade_Blue_Down.png"), wxBITMAP_TYPE_ANY ) );
+	segment_button_->SetBitmapSelected( wxBitmap( wxT("ui/Arcade_Blue_Down.png"), wxBITMAP_TYPE_PNG ) );
 	segment_button_->SetForegroundColour( wxSystemSettings::GetColour( wxSYS_COLOUR_APPWORKSPACE ) );
 	segment_button_->SetBackgroundColour( wxSystemSettings::GetColour( wxSYS_COLOUR_APPWORKSPACE ) );
 	
@@ -99,9 +137,9 @@
 	wxBoxSizer* AcceptSizer;
 	AcceptSizer = new wxBoxSizer( wxVERTICAL );
 	
-	accept_button_ = new wxBitmapButton( MainPanel, wxID_ANY, wxBitmap( wxT("Arcade_Green_Up.png"), wxBITMAP_TYPE_ANY ), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxNO_BORDER );
+	accept_button_ = new wxBitmapButton( MainPanel, wxID_ANY, wxBitmap( wxT("ui/Arcade_Green_Up.png"), wxBITMAP_TYPE_PNG ), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxNO_BORDER );
 	
-	accept_button_->SetBitmapSelected( wxBitmap( wxT("Arcade_Green_Down.png"), wxBITMAP_TYPE_ANY ) );
+	accept_button_->SetBitmapSelected( wxBitmap( wxT("ui/Arcade_Green_Down.png"), wxBITMAP_TYPE_PNG ) );
 	AcceptSizer->Add( accept_button_, 0, wxALIGN_CENTER, 10 );
 	
 	AcceptText = new wxStaticText( MainPanel, wxID_ANY, wxT("Go!"), wxDefaultPosition, wxDefaultSize, 0 );
@@ -118,9 +156,9 @@
 	wxBoxSizer* ResetSizer;
 	ResetSizer = new wxBoxSizer( wxVERTICAL );
 	
-	reset_button_ = new wxBitmapButton( MainPanel, wxID_ANY, wxBitmap( wxT("Arcade_Red_Up.png"), wxBITMAP_TYPE_ANY ), wxDefaultPosition, wxDefaultSize, 0|wxNO_BORDER );
+	reset_button_ = new wxBitmapButton( MainPanel, wxID_ANY, wxBitmap( wxT("ui/Arcade_Red_Up.png"), wxBITMAP_TYPE_PNG ), wxDefaultPosition, wxDefaultSize, 0|wxNO_BORDER );
 	
-	reset_button_->SetBitmapSelected( wxBitmap( wxT("Arcade_Red_Down.png"), wxBITMAP_TYPE_ANY ) );
+	reset_button_->SetBitmapSelected( wxBitmap( wxT("ui/Arcade_Red_Down.png"), wxBITMAP_TYPE_PNG ) );
 	ResetSizer->Add( reset_button_, 0, wxALIGN_CENTER, 5 );
 	
 	ResetText = new wxStaticText( MainPanel, wxID_ANY, wxT("Reset"), wxDefaultPosition, wxDefaultSize, 0 );
